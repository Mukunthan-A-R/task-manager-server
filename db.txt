CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(255) UNIQUE,
    password VARCHAR(255), -- Youâ€™ll need this if storing user credentials
    role VARCHAR(50),
    company VARCHAR(100),
    is_activated BOOLEAN DEFAULT FALSE -- Add is_activated column with a default value of false
);


-- Create the 'projects' table
CREATE TABLE projects (
    project_id SERIAL PRIMARY KEY,             -- Auto-incrementing primary key for the project
    name VARCHAR(255) NOT NULL,                -- Name of the project (string, not null)
    description TEXT,                          -- Detailed description of the project
    start_date DATE,                           -- Start date of the project
    end_date DATE,                             -- End date of the project
    status VARCHAR(50),                        -- Status of the project (e.g., 'active', 'completed')
    priority VARCHAR(50),                      -- Priority of the project (e.g., 'low', 'medium', 'high')
    created INT REFERENCES users(user_id)     -- Foreign key referencing the 'users' table (user_id)
);

-- Create the 'tasks' table
CREATE TABLE tasks (
    task_id SERIAL PRIMARY KEY,                -- Auto-incrementing primary key for each task
    project_id INT REFERENCES projects(project_id) ON DELETE CASCADE,  -- Foreign key to the 'projects' table
    title VARCHAR(255) NOT NULL,               -- Title of the task
    description TEXT,                          -- Description of the task
    status VARCHAR(50),                        -- Status of the task (e.g., 'not started', 'in progress', 'completed')
    time_duration INT,                         -- Time duration of the task in hours or minutes
    start_date DATE,                           -- Start date of the task
    end_date DATE,                             -- End date of the task
    created_date DATE DEFAULT CURRENT_DATE     -- Date when the task was created (defaults to current date)
);

-- Create the table "user_project_assignments "
CREATE TABLE user_project_assignments (
    assignment_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    project_id INT NOT NULL,
    role VARCHAR(50) NOT NULL,
    status VARCHAR(50) NOT NULL,
    assigned_at TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- Create the table "project_activity_logs "
CREATE TABLE project_activity_logs (
    log_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE SET NULL,         -- Who performed the action
    project_id INT REFERENCES projects(project_id) ON DELETE CASCADE, -- Which project the activity belongs to
    task_id INT,                                                      -- Which task was involved (no FK to preserve on delete)
    action VARCHAR(50) NOT NULL,                                      -- e.g. 'create', 'delete', 'update', 'status_change'
    description TEXT NOT NULL,                                        -- Human-readable message describing the activity
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- Create the table "password_resets"
CREATE TABLE password_resets (
    reset_id INT PRIMARY KEY,
    token VARCHAR(128) NOT NULL,
    user_id INT NOT NULL,
    expires_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL
);
