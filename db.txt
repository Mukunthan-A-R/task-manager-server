CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(255) UNIQUE,
    password VARCHAR(255), -- You’ll need this if storing user credentials
    role VARCHAR(50),
    company VARCHAR(100),
    is_activated BOOLEAN DEFAULT FALSE -- Add is_activated column with a default value of false
);


-- Create the 'projects' table
CREATE TABLE projects (
    project_id SERIAL PRIMARY KEY,             -- Auto-incrementing primary key for the project
    name VARCHAR(255) NOT NULL,                -- Name of the project (string, not null)
    description TEXT,                          -- Detailed description of the project
    start_date DATE,                           -- Start date of the project
    end_date DATE,                             -- End date of the project
    status VARCHAR(50),                        -- Status of the project (e.g., 'active', 'completed')
    priority VARCHAR(50),                      -- Priority of the project (e.g., 'low', 'medium', 'high')
    created INT REFERENCES users(user_id)     -- Foreign key referencing the 'users' table (user_id)
);

-- Create the 'tasks' table
CREATE TABLE tasks (
    task_id SERIAL PRIMARY KEY,                -- Auto-incrementing primary key for each task
    project_id INT REFERENCES projects(project_id) ON DELETE CASCADE,  -- Foreign key to the 'projects' table
    title VARCHAR(255) NOT NULL,               -- Title of the task
    description TEXT,                          -- Description of the task
    status VARCHAR(50),                        -- Status of the task (e.g., 'not started', 'in progress', 'completed')
    time_duration INT,                         -- Time duration of the task in hours or minutes
    start_date DATE,                           -- Start date of the task
    end_date DATE,                             -- End date of the task
    created_date DATE DEFAULT CURRENT_DATE     -- Date when the task was created (defaults to current date)
);

CREATE TABLE user_project_assignments (
  id SERIAL PRIMARY KEY, -- Unique identifier for each assignment

  user_id INTEGER NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  -- ✅ Corrected: Now references the actual primary key in 'users'

  project_id INTEGER NOT NULL REFERENCES projects(project_id) ON DELETE CASCADE,
  -- ✅ Corrected: Now references the actual primary key in 'projects'

  role VARCHAR(20) NOT NULL CHECK (role IN ('admin', 'manager', 'member', 'client')),
  -- Role of the user in the project; must be one of the allowed values

  status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'rejected')),
  -- Status of the assignment; defaults to 'pending'

  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

